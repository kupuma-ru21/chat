// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/date_message"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Date_Message is the model entity for the Date_Message schema.
type Date_Message struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Date_MessageQuery when eager-loading is set.
	Edges        Date_MessageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Date_MessageEdges holds the relations/edges for other nodes in the graph.
type Date_MessageEdges struct {
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedMessages map[string][]*Message
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e Date_MessageEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[0] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Date_Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case date_message.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case date_message.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Date_Message fields.
func (dm *Date_Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case date_message.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dm.ID = *value
			}
		case date_message.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dm.CreatedAt = value.Time
			}
		default:
			dm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Date_Message.
// This includes values selected through modifiers, order, etc.
func (dm *Date_Message) Value(name string) (ent.Value, error) {
	return dm.selectValues.Get(name)
}

// QueryMessages queries the "messages" edge of the Date_Message entity.
func (dm *Date_Message) QueryMessages() *MessageQuery {
	return NewDateMessageClient(dm.config).QueryMessages(dm)
}

// Update returns a builder for updating this Date_Message.
// Note that you need to call Date_Message.Unwrap() before calling this method if this Date_Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (dm *Date_Message) Update() *DateMessageUpdateOne {
	return NewDateMessageClient(dm.config).UpdateOne(dm)
}

// Unwrap unwraps the Date_Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dm *Date_Message) Unwrap() *Date_Message {
	_tx, ok := dm.config.driver.(*txDriver)
	if !ok {
		panic("ent: Date_Message is not a transactional entity")
	}
	dm.config.driver = _tx.drv
	return dm
}

// String implements the fmt.Stringer.
func (dm *Date_Message) String() string {
	var builder strings.Builder
	builder.WriteString("Date_Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(dm.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedMessages returns the Messages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (dm *Date_Message) NamedMessages(name string) ([]*Message, error) {
	if dm.Edges.namedMessages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := dm.Edges.namedMessages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (dm *Date_Message) appendNamedMessages(name string, edges ...*Message) {
	if dm.Edges.namedMessages == nil {
		dm.Edges.namedMessages = make(map[string][]*Message)
	}
	if len(edges) == 0 {
		dm.Edges.namedMessages[name] = []*Message{}
	} else {
		dm.Edges.namedMessages[name] = append(dm.Edges.namedMessages[name], edges...)
	}
}

// Date_Messages is a parsable slice of Date_Message.
type Date_Messages []*Date_Message
