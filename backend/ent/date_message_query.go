// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/date_message"
	"backend/ent/message"
	"backend/ent/predicate"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DateMessageQuery is the builder for querying Date_Message entities.
type DateMessageQuery struct {
	config
	ctx               *QueryContext
	order             []date_message.OrderOption
	inters            []Interceptor
	predicates        []predicate.Date_Message
	withMessages      *MessageQuery
	modifiers         []func(*sql.Selector)
	loadTotal         []func(context.Context, []*Date_Message) error
	withNamedMessages map[string]*MessageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DateMessageQuery builder.
func (dmq *DateMessageQuery) Where(ps ...predicate.Date_Message) *DateMessageQuery {
	dmq.predicates = append(dmq.predicates, ps...)
	return dmq
}

// Limit the number of records to be returned by this query.
func (dmq *DateMessageQuery) Limit(limit int) *DateMessageQuery {
	dmq.ctx.Limit = &limit
	return dmq
}

// Offset to start from.
func (dmq *DateMessageQuery) Offset(offset int) *DateMessageQuery {
	dmq.ctx.Offset = &offset
	return dmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dmq *DateMessageQuery) Unique(unique bool) *DateMessageQuery {
	dmq.ctx.Unique = &unique
	return dmq
}

// Order specifies how the records should be ordered.
func (dmq *DateMessageQuery) Order(o ...date_message.OrderOption) *DateMessageQuery {
	dmq.order = append(dmq.order, o...)
	return dmq
}

// QueryMessages chains the current query on the "messages" edge.
func (dmq *DateMessageQuery) QueryMessages() *MessageQuery {
	query := (&MessageClient{config: dmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(date_message.Table, date_message.FieldID, selector),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, date_message.MessagesTable, date_message.MessagesColumn),
		)
		fromU = sqlgraph.SetNeighbors(dmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Date_Message entity from the query.
// Returns a *NotFoundError when no Date_Message was found.
func (dmq *DateMessageQuery) First(ctx context.Context) (*Date_Message, error) {
	nodes, err := dmq.Limit(1).All(setContextOp(ctx, dmq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{date_message.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dmq *DateMessageQuery) FirstX(ctx context.Context) *Date_Message {
	node, err := dmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Date_Message ID from the query.
// Returns a *NotFoundError when no Date_Message ID was found.
func (dmq *DateMessageQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dmq.Limit(1).IDs(setContextOp(ctx, dmq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{date_message.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dmq *DateMessageQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := dmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Date_Message entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Date_Message entity is found.
// Returns a *NotFoundError when no Date_Message entities are found.
func (dmq *DateMessageQuery) Only(ctx context.Context) (*Date_Message, error) {
	nodes, err := dmq.Limit(2).All(setContextOp(ctx, dmq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{date_message.Label}
	default:
		return nil, &NotSingularError{date_message.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dmq *DateMessageQuery) OnlyX(ctx context.Context) *Date_Message {
	node, err := dmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Date_Message ID in the query.
// Returns a *NotSingularError when more than one Date_Message ID is found.
// Returns a *NotFoundError when no entities are found.
func (dmq *DateMessageQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dmq.Limit(2).IDs(setContextOp(ctx, dmq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{date_message.Label}
	default:
		err = &NotSingularError{date_message.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dmq *DateMessageQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := dmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Date_Messages.
func (dmq *DateMessageQuery) All(ctx context.Context) ([]*Date_Message, error) {
	ctx = setContextOp(ctx, dmq.ctx, ent.OpQueryAll)
	if err := dmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Date_Message, *DateMessageQuery]()
	return withInterceptors[[]*Date_Message](ctx, dmq, qr, dmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dmq *DateMessageQuery) AllX(ctx context.Context) []*Date_Message {
	nodes, err := dmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Date_Message IDs.
func (dmq *DateMessageQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if dmq.ctx.Unique == nil && dmq.path != nil {
		dmq.Unique(true)
	}
	ctx = setContextOp(ctx, dmq.ctx, ent.OpQueryIDs)
	if err = dmq.Select(date_message.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dmq *DateMessageQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := dmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dmq *DateMessageQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dmq.ctx, ent.OpQueryCount)
	if err := dmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dmq, querierCount[*DateMessageQuery](), dmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dmq *DateMessageQuery) CountX(ctx context.Context) int {
	count, err := dmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dmq *DateMessageQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dmq.ctx, ent.OpQueryExist)
	switch _, err := dmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dmq *DateMessageQuery) ExistX(ctx context.Context) bool {
	exist, err := dmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DateMessageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dmq *DateMessageQuery) Clone() *DateMessageQuery {
	if dmq == nil {
		return nil
	}
	return &DateMessageQuery{
		config:       dmq.config,
		ctx:          dmq.ctx.Clone(),
		order:        append([]date_message.OrderOption{}, dmq.order...),
		inters:       append([]Interceptor{}, dmq.inters...),
		predicates:   append([]predicate.Date_Message{}, dmq.predicates...),
		withMessages: dmq.withMessages.Clone(),
		// clone intermediate query.
		sql:  dmq.sql.Clone(),
		path: dmq.path,
	}
}

// WithMessages tells the query-builder to eager-load the nodes that are connected to
// the "messages" edge. The optional arguments are used to configure the query builder of the edge.
func (dmq *DateMessageQuery) WithMessages(opts ...func(*MessageQuery)) *DateMessageQuery {
	query := (&MessageClient{config: dmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dmq.withMessages = query
	return dmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DateMessage.Query().
//		GroupBy(date_message.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dmq *DateMessageQuery) GroupBy(field string, fields ...string) *DateMessageGroupBy {
	dmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DateMessageGroupBy{build: dmq}
	grbuild.flds = &dmq.ctx.Fields
	grbuild.label = date_message.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.DateMessage.Query().
//		Select(date_message.FieldCreatedAt).
//		Scan(ctx, &v)
func (dmq *DateMessageQuery) Select(fields ...string) *DateMessageSelect {
	dmq.ctx.Fields = append(dmq.ctx.Fields, fields...)
	sbuild := &DateMessageSelect{DateMessageQuery: dmq}
	sbuild.label = date_message.Label
	sbuild.flds, sbuild.scan = &dmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DateMessageSelect configured with the given aggregations.
func (dmq *DateMessageQuery) Aggregate(fns ...AggregateFunc) *DateMessageSelect {
	return dmq.Select().Aggregate(fns...)
}

func (dmq *DateMessageQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dmq); err != nil {
				return err
			}
		}
	}
	for _, f := range dmq.ctx.Fields {
		if !date_message.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dmq.path != nil {
		prev, err := dmq.path(ctx)
		if err != nil {
			return err
		}
		dmq.sql = prev
	}
	return nil
}

func (dmq *DateMessageQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Date_Message, error) {
	var (
		nodes       = []*Date_Message{}
		_spec       = dmq.querySpec()
		loadedTypes = [1]bool{
			dmq.withMessages != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Date_Message).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Date_Message{config: dmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(dmq.modifiers) > 0 {
		_spec.Modifiers = dmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dmq.withMessages; query != nil {
		if err := dmq.loadMessages(ctx, query, nodes,
			func(n *Date_Message) { n.Edges.Messages = []*Message{} },
			func(n *Date_Message, e *Message) { n.Edges.Messages = append(n.Edges.Messages, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range dmq.withNamedMessages {
		if err := dmq.loadMessages(ctx, query, nodes,
			func(n *Date_Message) { n.appendNamedMessages(name) },
			func(n *Date_Message, e *Message) { n.appendNamedMessages(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range dmq.loadTotal {
		if err := dmq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dmq *DateMessageQuery) loadMessages(ctx context.Context, query *MessageQuery, nodes []*Date_Message, init func(*Date_Message), assign func(*Date_Message, *Message)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Date_Message)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(message.FieldDateID)
	}
	query.Where(predicate.Message(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(date_message.MessagesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.DateID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "date_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (dmq *DateMessageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dmq.querySpec()
	if len(dmq.modifiers) > 0 {
		_spec.Modifiers = dmq.modifiers
	}
	_spec.Node.Columns = dmq.ctx.Fields
	if len(dmq.ctx.Fields) > 0 {
		_spec.Unique = dmq.ctx.Unique != nil && *dmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dmq.driver, _spec)
}

func (dmq *DateMessageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(date_message.Table, date_message.Columns, sqlgraph.NewFieldSpec(date_message.FieldID, field.TypeUUID))
	_spec.From = dmq.sql
	if unique := dmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dmq.path != nil {
		_spec.Unique = true
	}
	if fields := dmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, date_message.FieldID)
		for i := range fields {
			if fields[i] != date_message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dmq *DateMessageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dmq.driver.Dialect())
	t1 := builder.Table(date_message.Table)
	columns := dmq.ctx.Fields
	if len(columns) == 0 {
		columns = date_message.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dmq.sql != nil {
		selector = dmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dmq.ctx.Unique != nil && *dmq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dmq.predicates {
		p(selector)
	}
	for _, p := range dmq.order {
		p(selector)
	}
	if offset := dmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedMessages tells the query-builder to eager-load the nodes that are connected to the "messages"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (dmq *DateMessageQuery) WithNamedMessages(name string, opts ...func(*MessageQuery)) *DateMessageQuery {
	query := (&MessageClient{config: dmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if dmq.withNamedMessages == nil {
		dmq.withNamedMessages = make(map[string]*MessageQuery)
	}
	dmq.withNamedMessages[name] = query
	return dmq
}

// DateMessageGroupBy is the group-by builder for Date_Message entities.
type DateMessageGroupBy struct {
	selector
	build *DateMessageQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dmgb *DateMessageGroupBy) Aggregate(fns ...AggregateFunc) *DateMessageGroupBy {
	dmgb.fns = append(dmgb.fns, fns...)
	return dmgb
}

// Scan applies the selector query and scans the result into the given value.
func (dmgb *DateMessageGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dmgb.build.ctx, ent.OpQueryGroupBy)
	if err := dmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DateMessageQuery, *DateMessageGroupBy](ctx, dmgb.build, dmgb, dmgb.build.inters, v)
}

func (dmgb *DateMessageGroupBy) sqlScan(ctx context.Context, root *DateMessageQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dmgb.fns))
	for _, fn := range dmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dmgb.flds)+len(dmgb.fns))
		for _, f := range *dmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DateMessageSelect is the builder for selecting fields of DateMessage entities.
type DateMessageSelect struct {
	*DateMessageQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dms *DateMessageSelect) Aggregate(fns ...AggregateFunc) *DateMessageSelect {
	dms.fns = append(dms.fns, fns...)
	return dms
}

// Scan applies the selector query and scans the result into the given value.
func (dms *DateMessageSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dms.ctx, ent.OpQuerySelect)
	if err := dms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DateMessageQuery, *DateMessageSelect](ctx, dms.DateMessageQuery, dms, dms.inters, v)
}

func (dms *DateMessageSelect) sqlScan(ctx context.Context, root *DateMessageQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dms.fns))
	for _, fn := range dms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
