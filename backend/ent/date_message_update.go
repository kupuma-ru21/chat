// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/date_message"
	"backend/ent/message"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DateMessageUpdate is the builder for updating Date_Message entities.
type DateMessageUpdate struct {
	config
	hooks    []Hook
	mutation *DateMessageMutation
}

// Where appends a list predicates to the DateMessageUpdate builder.
func (dmu *DateMessageUpdate) Where(ps ...predicate.Date_Message) *DateMessageUpdate {
	dmu.mutation.Where(ps...)
	return dmu
}

// SetCreatedAt sets the "created_at" field.
func (dmu *DateMessageUpdate) SetCreatedAt(t time.Time) *DateMessageUpdate {
	dmu.mutation.SetCreatedAt(t)
	return dmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dmu *DateMessageUpdate) SetNillableCreatedAt(t *time.Time) *DateMessageUpdate {
	if t != nil {
		dmu.SetCreatedAt(*t)
	}
	return dmu
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (dmu *DateMessageUpdate) AddMessageIDs(ids ...uuid.UUID) *DateMessageUpdate {
	dmu.mutation.AddMessageIDs(ids...)
	return dmu
}

// AddMessages adds the "messages" edges to the Message entity.
func (dmu *DateMessageUpdate) AddMessages(m ...*Message) *DateMessageUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dmu.AddMessageIDs(ids...)
}

// Mutation returns the DateMessageMutation object of the builder.
func (dmu *DateMessageUpdate) Mutation() *DateMessageMutation {
	return dmu.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (dmu *DateMessageUpdate) ClearMessages() *DateMessageUpdate {
	dmu.mutation.ClearMessages()
	return dmu
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (dmu *DateMessageUpdate) RemoveMessageIDs(ids ...uuid.UUID) *DateMessageUpdate {
	dmu.mutation.RemoveMessageIDs(ids...)
	return dmu
}

// RemoveMessages removes "messages" edges to Message entities.
func (dmu *DateMessageUpdate) RemoveMessages(m ...*Message) *DateMessageUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dmu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dmu *DateMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dmu.sqlSave, dmu.mutation, dmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmu *DateMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := dmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dmu *DateMessageUpdate) Exec(ctx context.Context) error {
	_, err := dmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmu *DateMessageUpdate) ExecX(ctx context.Context) {
	if err := dmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dmu *DateMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(date_message.Table, date_message.Columns, sqlgraph.NewFieldSpec(date_message.FieldID, field.TypeUUID))
	if ps := dmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmu.mutation.CreatedAt(); ok {
		_spec.SetField(date_message.FieldCreatedAt, field.TypeTime, value)
	}
	if dmu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   date_message.MessagesTable,
			Columns: []string{date_message.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !dmu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   date_message.MessagesTable,
			Columns: []string{date_message.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   date_message.MessagesTable,
			Columns: []string{date_message.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{date_message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dmu.mutation.done = true
	return n, nil
}

// DateMessageUpdateOne is the builder for updating a single Date_Message entity.
type DateMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DateMessageMutation
}

// SetCreatedAt sets the "created_at" field.
func (dmuo *DateMessageUpdateOne) SetCreatedAt(t time.Time) *DateMessageUpdateOne {
	dmuo.mutation.SetCreatedAt(t)
	return dmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dmuo *DateMessageUpdateOne) SetNillableCreatedAt(t *time.Time) *DateMessageUpdateOne {
	if t != nil {
		dmuo.SetCreatedAt(*t)
	}
	return dmuo
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (dmuo *DateMessageUpdateOne) AddMessageIDs(ids ...uuid.UUID) *DateMessageUpdateOne {
	dmuo.mutation.AddMessageIDs(ids...)
	return dmuo
}

// AddMessages adds the "messages" edges to the Message entity.
func (dmuo *DateMessageUpdateOne) AddMessages(m ...*Message) *DateMessageUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dmuo.AddMessageIDs(ids...)
}

// Mutation returns the DateMessageMutation object of the builder.
func (dmuo *DateMessageUpdateOne) Mutation() *DateMessageMutation {
	return dmuo.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (dmuo *DateMessageUpdateOne) ClearMessages() *DateMessageUpdateOne {
	dmuo.mutation.ClearMessages()
	return dmuo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (dmuo *DateMessageUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *DateMessageUpdateOne {
	dmuo.mutation.RemoveMessageIDs(ids...)
	return dmuo
}

// RemoveMessages removes "messages" edges to Message entities.
func (dmuo *DateMessageUpdateOne) RemoveMessages(m ...*Message) *DateMessageUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dmuo.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the DateMessageUpdate builder.
func (dmuo *DateMessageUpdateOne) Where(ps ...predicate.Date_Message) *DateMessageUpdateOne {
	dmuo.mutation.Where(ps...)
	return dmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dmuo *DateMessageUpdateOne) Select(field string, fields ...string) *DateMessageUpdateOne {
	dmuo.fields = append([]string{field}, fields...)
	return dmuo
}

// Save executes the query and returns the updated Date_Message entity.
func (dmuo *DateMessageUpdateOne) Save(ctx context.Context) (*Date_Message, error) {
	return withHooks(ctx, dmuo.sqlSave, dmuo.mutation, dmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmuo *DateMessageUpdateOne) SaveX(ctx context.Context) *Date_Message {
	node, err := dmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dmuo *DateMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := dmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmuo *DateMessageUpdateOne) ExecX(ctx context.Context) {
	if err := dmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dmuo *DateMessageUpdateOne) sqlSave(ctx context.Context) (_node *Date_Message, err error) {
	_spec := sqlgraph.NewUpdateSpec(date_message.Table, date_message.Columns, sqlgraph.NewFieldSpec(date_message.FieldID, field.TypeUUID))
	id, ok := dmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Date_Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, date_message.FieldID)
		for _, f := range fields {
			if !date_message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != date_message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmuo.mutation.CreatedAt(); ok {
		_spec.SetField(date_message.FieldCreatedAt, field.TypeTime, value)
	}
	if dmuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   date_message.MessagesTable,
			Columns: []string{date_message.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !dmuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   date_message.MessagesTable,
			Columns: []string{date_message.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   date_message.MessagesTable,
			Columns: []string{date_message.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Date_Message{config: dmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{date_message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dmuo.mutation.done = true
	return _node, nil
}
