package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"backend/utils/errCustom"
	"context"
	"time"

	"github.com/google/uuid"
)

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, userID uuid.UUID, content string) (uuid.UUID, error) {
	if userID == uuid.Nil {
		return uuid.Nil, errCustom.Create("userID is required")
	}
	if content == "" {
		return uuid.Nil, errCustom.Create("content is required")
	}

	createdAt := time.Now()

	// create a message and date_message if the date is new
	dates, err := r.client.Date_Message.Query().All(ctx)
	if err != nil {
		return uuid.Nil, err
	}
	var dateId uuid.UUID
	for _, date := range dates {
		prevParsedCreatedAt, err := time.Parse(
			time.RFC3339,
			date.CreatedAt.Format(time.RFC3339),
		)
		if err != nil {
			return uuid.Nil, err
		}

		parsedCreatedAt, err := time.Parse(time.RFC3339, createdAt.Format(time.RFC3339))
		if err != nil {
			return uuid.Nil, err
		}
		if prevParsedCreatedAt.Year() == parsedCreatedAt.Year() &&
			prevParsedCreatedAt.Month() == parsedCreatedAt.Month() &&
			prevParsedCreatedAt.Day() == parsedCreatedAt.Day() {
			dateId = date.ID
			break
		}
	}
	if dateId == uuid.Nil {
		// TODO: add transaction between Message and Date_Message
		d, err := r.client.Date_Message.Create().SetCreatedAt(createdAt).Save(ctx)
		if err != nil {
			return uuid.Nil, err
		}
		m, err := r.client.Message.Create().
			SetUserID(userID).SetContent(content).
			SetCreatedAt(createdAt).SetDateID(d.ID).
			Save(ctx)
		if err != nil {
			return uuid.Nil, err
		}
		return m.ID, nil
	}

	// TODO: add transaction between Message and Date_Message
	// create a message and date_message if the date is not new
	m, err := r.client.Message.Create().SetUserID(userID).
		SetContent(content).SetCreatedAt(createdAt).
		SetDateID(dateId).Save(ctx)
	if err != nil {
		return uuid.Nil, err
	}

	return m.ID, nil
}
