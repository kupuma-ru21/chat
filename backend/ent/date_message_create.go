// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/date_message"
	"backend/ent/message"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DateMessageCreate is the builder for creating a Date_Message entity.
type DateMessageCreate struct {
	config
	mutation *DateMessageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dmc *DateMessageCreate) SetCreatedAt(t time.Time) *DateMessageCreate {
	dmc.mutation.SetCreatedAt(t)
	return dmc
}

// SetID sets the "id" field.
func (dmc *DateMessageCreate) SetID(u uuid.UUID) *DateMessageCreate {
	dmc.mutation.SetID(u)
	return dmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dmc *DateMessageCreate) SetNillableID(u *uuid.UUID) *DateMessageCreate {
	if u != nil {
		dmc.SetID(*u)
	}
	return dmc
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (dmc *DateMessageCreate) AddMessageIDs(ids ...uuid.UUID) *DateMessageCreate {
	dmc.mutation.AddMessageIDs(ids...)
	return dmc
}

// AddMessages adds the "messages" edges to the Message entity.
func (dmc *DateMessageCreate) AddMessages(m ...*Message) *DateMessageCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dmc.AddMessageIDs(ids...)
}

// Mutation returns the DateMessageMutation object of the builder.
func (dmc *DateMessageCreate) Mutation() *DateMessageMutation {
	return dmc.mutation
}

// Save creates the Date_Message in the database.
func (dmc *DateMessageCreate) Save(ctx context.Context) (*Date_Message, error) {
	dmc.defaults()
	return withHooks(ctx, dmc.sqlSave, dmc.mutation, dmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dmc *DateMessageCreate) SaveX(ctx context.Context) *Date_Message {
	v, err := dmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmc *DateMessageCreate) Exec(ctx context.Context) error {
	_, err := dmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmc *DateMessageCreate) ExecX(ctx context.Context) {
	if err := dmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dmc *DateMessageCreate) defaults() {
	if _, ok := dmc.mutation.ID(); !ok {
		v := date_message.DefaultID()
		dmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmc *DateMessageCreate) check() error {
	if _, ok := dmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Date_Message.created_at"`)}
	}
	return nil
}

func (dmc *DateMessageCreate) sqlSave(ctx context.Context) (*Date_Message, error) {
	if err := dmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dmc.mutation.id = &_node.ID
	dmc.mutation.done = true
	return _node, nil
}

func (dmc *DateMessageCreate) createSpec() (*Date_Message, *sqlgraph.CreateSpec) {
	var (
		_node = &Date_Message{config: dmc.config}
		_spec = sqlgraph.NewCreateSpec(date_message.Table, sqlgraph.NewFieldSpec(date_message.FieldID, field.TypeUUID))
	)
	if id, ok := dmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dmc.mutation.CreatedAt(); ok {
		_spec.SetField(date_message.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := dmc.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   date_message.MessagesTable,
			Columns: []string{date_message.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DateMessageCreateBulk is the builder for creating many Date_Message entities in bulk.
type DateMessageCreateBulk struct {
	config
	err      error
	builders []*DateMessageCreate
}

// Save creates the Date_Message entities in the database.
func (dmcb *DateMessageCreateBulk) Save(ctx context.Context) ([]*Date_Message, error) {
	if dmcb.err != nil {
		return nil, dmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dmcb.builders))
	nodes := make([]*Date_Message, len(dmcb.builders))
	mutators := make([]Mutator, len(dmcb.builders))
	for i := range dmcb.builders {
		func(i int, root context.Context) {
			builder := dmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DateMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dmcb *DateMessageCreateBulk) SaveX(ctx context.Context) []*Date_Message {
	v, err := dmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmcb *DateMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := dmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmcb *DateMessageCreateBulk) ExecX(ctx context.Context) {
	if err := dmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
